// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package repository

import (
	"context"
)

const createGame = `-- name: CreateGame :one
INSERT INTO game (
  name, type
) VALUES (
  $1, $2
)
RETURNING id, name, type
`

type CreateGameParams struct {
	Name string
	Type string
}

func (q *Queries) CreateGame(ctx context.Context, arg CreateGameParams) (Game, error) {
	row := q.db.QueryRow(ctx, createGame, arg.Name, arg.Type)
	var i Game
	err := row.Scan(&i.ID, &i.Name, &i.Type)
	return i, err
}

const deleteGame = `-- name: DeleteGame :exec
DELETE FROM game
WHERE id = $1
`

func (q *Queries) DeleteGame(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteGame, id)
	return err
}

const getGame = `-- name: GetGame :one
SELECT id, name, type FROM game
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetGame(ctx context.Context, id int64) (Game, error) {
	row := q.db.QueryRow(ctx, getGame, id)
	var i Game
	err := row.Scan(&i.ID, &i.Name, &i.Type)
	return i, err
}

const listGames = `-- name: ListGames :many
SELECT id, name, type FROM game
ORDER BY name
`

func (q *Queries) ListGames(ctx context.Context) ([]Game, error) {
	rows, err := q.db.Query(ctx, listGames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Game
	for rows.Next() {
		var i Game
		if err := rows.Scan(&i.ID, &i.Name, &i.Type); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGame = `-- name: UpdateGame :exec
UPDATE game
  set name = $2,
  type = $3
WHERE id = $1
`

type UpdateGameParams struct {
	ID   int64
	Name string
	Type string
}

func (q *Queries) UpdateGame(ctx context.Context, arg UpdateGameParams) error {
	_, err := q.db.Exec(ctx, updateGame, arg.ID, arg.Name, arg.Type)
	return err
}
